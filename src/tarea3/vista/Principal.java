/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tarea3.vista;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import tarea3.Token;
import tarea3.TokenError;
import tarea3.analizadores.Parser;
import tarea3.analizadores.Scanner;

/**
 *
 * @author Kimberly Elias
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        entradaTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        salidaTextArea = new javax.swing.JTextArea();
        cargarButton = new javax.swing.JButton();
        analizarButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        entradaTextArea.setColumns(20);
        entradaTextArea.setFont(new java.awt.Font("Museo Sans For Dell", 0, 12)); // NOI18N
        entradaTextArea.setRows(5);
        jScrollPane1.setViewportView(entradaTextArea);

        salidaTextArea.setEditable(false);
        salidaTextArea.setColumns(20);
        salidaTextArea.setFont(new java.awt.Font("Museo Sans For Dell", 0, 12)); // NOI18N
        salidaTextArea.setRows(5);
        jScrollPane2.setViewportView(salidaTextArea);

        cargarButton.setFont(new java.awt.Font("Museo Sans For Dell", 0, 12)); // NOI18N
        cargarButton.setText("Cargar");
        cargarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarButtonActionPerformed(evt);
            }
        });

        analizarButton.setFont(new java.awt.Font("Museo Sans For Dell", 0, 12)); // NOI18N
        analizarButton.setText("Anallizar");
        analizarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analizarButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Museo Sans For Dell", 0, 12)); // NOI18N
        jLabel1.setText("<html>Kimberly Mireya Elias Diaz<br>\n201700507</html>\n"); // NOI18N
        jLabel1.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(209, 209, 209)
                        .addComponent(cargarButton)
                        .addGap(59, 59, 59)
                        .addComponent(analizarButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 559, Short.MAX_VALUE)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cargarButton)
                    .addComponent(analizarButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cargarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarButtonActionPerformed
        File archivoSeleccionado;
        JFileChooser seleccionarArchivo = new JFileChooser();
        String texto = "";
        String linea = null;

        if (seleccionarArchivo.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            archivoSeleccionado = seleccionarArchivo.getSelectedFile();

            try {
                FileReader leerArchivo = new FileReader(archivoSeleccionado);
                BufferedReader bufferedReader = new BufferedReader(leerArchivo);
                while ((linea = bufferedReader.readLine()) != null) {
                    texto += linea + "\n";
                }
                bufferedReader.close();

            } catch (FileNotFoundException ex) {
                System.out.println("No se puede abrir el archivo");
            } catch (IOException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        entradaTextArea.setText(texto);
    }//GEN-LAST:event_cargarButtonActionPerformed

    private void analizarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analizarButtonActionPerformed
        Scanner.tablaErrores.clear();
        Parser.tablaErrores.clear();
        Parser.consola = "";
        String salida = "";
        Scanner scanner = new Scanner(new BufferedReader(new StringReader(entradaTextArea.getText())));
        Parser parser = new Parser(scanner);
        try {

            parser.parse();

        } catch (Exception e) {

        }
        
        salida += "*************************************** Consola **************************************** \n" + Parser.consola + "\n";
        
        salida += "************************************ Lista de Tokens ************************************** \n";
        for(int i = 0; i < Scanner.tablaSimbolos.size(); i++){
            Token token = Scanner.tablaSimbolos.get(i);
            salida += "Token: " + token.getToken() + ", Lexema: " + token.getLexema() + ", Línea: " + token.getLinea() + ", Columna: " + token.getColumna() + "\n";
        }
        salida += "\n";
        
        salida += "************************************ Errores Léxicos ************************************** \n";
        LinkedList<TokenError> tablaErroresLexicos = Scanner.tablaErrores;
        System.out.println("-------- Errores Léxicos: " + tablaErroresLexicos.size());
        for (int i = 0; i < tablaErroresLexicos.size(); i++) {
            salida += i + ". Lexema: " + tablaErroresLexicos.get(i).getLexema() + ", Linea: " + tablaErroresLexicos.get(i).getLinea()+ ", Columna: " + tablaErroresLexicos.get(i).getColumna() + ", Descripción: " + tablaErroresLexicos.get(i).getDescripcion() + "\n";
            System.out.println(i + ". Lexema: " + tablaErroresLexicos.get(i).getLexema() + ", Linea: " + tablaErroresLexicos.get(i).getLinea()+ ", Columna: " + tablaErroresLexicos.get(i).getColumna() + ", Descripción: " + tablaErroresLexicos.get(i).getDescripcion());
        }
        salida += "\n";
        
        salida += "*********************************** Errores Sintácticos ************************************ \n";
        LinkedList<TokenError> tablaErroresSintacticos = Parser.tablaErrores;
        System.out.println("-------- Errores Sintácticos: " + tablaErroresSintacticos.size());
        for (int i = 0; i < tablaErroresSintacticos.size(); i++) {
            salida += i + ". Lexema: " + tablaErroresSintacticos.get(i).getLexema() + ", Linea: " + tablaErroresSintacticos.get(i).getLinea()+ ", Columna: " + tablaErroresSintacticos.get(i).getColumna() + ", Descripción: " + tablaErroresSintacticos.get(i).getDescripcion() + "\n";
            System.out.println(i + ". Lexema: " + tablaErroresSintacticos.get(i).getLexema() + ", Linea: " + tablaErroresSintacticos.get(i).getLinea()+ ", Columna: " + tablaErroresSintacticos.get(i).getColumna() + ", Descripción: " + tablaErroresSintacticos.get(i).getDescripcion());
        }
        salidaTextArea.setText(salida);
        
    }//GEN-LAST:event_analizarButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton analizarButton;
    private javax.swing.JButton cargarButton;
    private javax.swing.JTextArea entradaTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea salidaTextArea;
    // End of variables declaration//GEN-END:variables
}
